// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package controllers

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeUriOneInternalControllers(in *jlexer.Lexer, out *ShortenResponseModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "source":
			out.Source = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeUriOneInternalControllers(out *jwriter.Writer, in ShortenResponseModel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ShortenResponseModel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeUriOneInternalControllers(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ShortenResponseModel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeUriOneInternalControllers(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ShortenResponseModel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeUriOneInternalControllers(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ShortenResponseModel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeUriOneInternalControllers(l, v)
}
func easyjsonD2b7633eDecodeUriOneInternalControllers1(in *jlexer.Lexer, out *ShortenRequestModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "source":
			out.Source = string(in.String())
		case "token":
			out.Token = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeUriOneInternalControllers1(out *jwriter.Writer, in ShortenRequestModel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix)
		out.String(string(in.Token))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ShortenRequestModel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeUriOneInternalControllers1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ShortenRequestModel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeUriOneInternalControllers1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ShortenRequestModel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeUriOneInternalControllers1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ShortenRequestModel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeUriOneInternalControllers1(l, v)
}
func easyjsonD2b7633eDecodeUriOneInternalControllers2(in *jlexer.Lexer, out *ConfigModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "orgName":
			out.OrgName = string(in.String())
		case "serviceName":
			out.ServiceName = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "captchaUse":
			out.CaptchaUse = bool(in.Bool())
		case "captchaClientKey":
			out.CaptchaClientKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeUriOneInternalControllers2(out *jwriter.Writer, in ConfigModel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"orgName\":"
		out.RawString(prefix)
		out.String(string(in.OrgName))
	}
	{
		const prefix string = ",\"serviceName\":"
		out.RawString(prefix)
		out.String(string(in.ServiceName))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"captchaUse\":"
		out.RawString(prefix)
		out.Bool(bool(in.CaptchaUse))
	}
	{
		const prefix string = ",\"captchaClientKey\":"
		out.RawString(prefix)
		out.String(string(in.CaptchaClientKey))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConfigModel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeUriOneInternalControllers2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConfigModel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeUriOneInternalControllers2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConfigModel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeUriOneInternalControllers2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConfigModel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeUriOneInternalControllers2(l, v)
}
